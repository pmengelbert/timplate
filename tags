!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
AfterTax	pkg/timesheet/sheet.go	/^func (s Sheet) AfterTax() float64 {$/;"	f	struct:timesheet.Sheet	typeref:typename:float64
Basic installation	README.md	/^### Basic installation$/;"	S
Basic usage	README.md	/^### Basic usage$/;"	S
Buffer	pkg/converter/converter.go	/^		Buffer         *bytes.Buffer$/;"	m	struct:converter.Converter	typeref:typename:*bytes.Buffer
BulletList	pkg/timesheet/sheet.go	/^	BulletList []string$/;"	t	package:timesheet	typeref:typename:[]string
CapitalizeDescriptions	pkg/timesheet/sheet.go	/^func (s *Sheet) CapitalizeDescriptions() {$/;"	f	struct:timesheet.Sheet
CompilePDF	pkg/converter/converter.go	/^func (c *Converter) CompilePDF() error {$/;"	f	struct:converter.Converter	typeref:typename:error
Converter	pkg/converter/converter.go	/^	Converter struct {$/;"	s	package:converter
Date	pkg/timesheet/sheet.go	/^		Date        string     `json:"date"`$/;"	m	struct:timesheet.Record	typeref:typename:string
DefaultConverter	pkg/converter/converter.go	/^func DefaultConverter(infile, outfile string) (*Converter, error) {$/;"	f	package:converter	typeref:typename:(*Converter, error)
Dependencies	README.md	/^### Dependencies$/;"	S
Description	pkg/timesheet/sheet.go	/^		Description BulletList `json:"description"`$/;"	m	struct:timesheet.Record	typeref:typename:BulletList
EndDate	pkg/timesheet/sheet.go	/^		EndDate   string   `json:"endDate"`$/;"	m	struct:timesheet.Sheet	typeref:typename:string
EnumItemString	pkg/converter/converter.go	/^		EnumItemString string$/;"	m	struct:converter.Converter	typeref:typename:string
HOME	Makefile	/^export HOME := $(HOME)$/;"	m
Hours	pkg/timesheet/sheet.go	/^		Hours       string     `json:"hours"`$/;"	m	struct:timesheet.Record	typeref:typename:string
Infile	pkg/converter/converter.go	/^		Infile         string$/;"	m	struct:converter.Converter	typeref:typename:string
InfileText	pkg/converter/converter.go	/^		InfileText     []byte$/;"	m	struct:converter.Converter	typeref:typename:[]byte
Name	pkg/timesheet/sheet.go	/^		Name      string   `json:"name"`$/;"	m	struct:timesheet.Sheet	typeref:typename:string
Outfile	pkg/converter/converter.go	/^		Outfile        string$/;"	m	struct:converter.Converter	typeref:typename:string
PATH	Makefile	/^export PATH := \/usr\/bin:$(PATH)$/;"	m
Parse	pkg/timesheet/sheet.go	/^func Parse(t string) (Time, error) {$/;"	f	package:timesheet	typeref:typename:(Time, error)
Rate	pkg/timesheet/sheet.go	/^		Rate      int      `json:"rate"`$/;"	m	struct:timesheet.Sheet	typeref:typename:int
Record	pkg/timesheet/sheet.go	/^	Record struct {$/;"	s	package:timesheet
Records	pkg/timesheet/sheet.go	/^		Records   []Record `json:"records"`$/;"	m	struct:timesheet.Sheet	typeref:typename:[]Record
SaveOutfile	pkg/converter/converter.go	/^func (c *Converter) SaveOutfile() error {$/;"	f	struct:converter.Converter	typeref:typename:error
Sheet	pkg/converter/converter.go	/^		Sheet          timesheet.Sheet$/;"	m	struct:converter.Converter	typeref:typename:timesheet.Sheet
Sheet	pkg/timesheet/sheet.go	/^	Sheet struct {$/;"	s	package:timesheet
StartDate	pkg/timesheet/sheet.go	/^		StartDate string   `json:"startDate"`$/;"	m	struct:timesheet.Sheet	typeref:typename:string
Subtract	pkg/timesheet/sheet.go	/^func (t1 Time) Subtract(t2 Time) float32 {$/;"	f	type:timesheet.Time	typeref:typename:float32
TaxRate	pkg/timesheet/sheet.go	/^		TaxRate   float64  `json:"taxRate"`$/;"	m	struct:timesheet.Sheet	typeref:typename:float64
Template	pkg/converter/converter.go	/^		Template       *template.Template$/;"	m	struct:converter.Converter	typeref:typename:*template.Template
TemplateString	pkg/converter/converter.go	/^		TemplateString string$/;"	m	struct:converter.Converter	typeref:typename:string
Time	pkg/timesheet/sheet.go	/^	Time [2]int8$/;"	t	package:timesheet	typeref:typename:[2]int8
TimeSum	pkg/timesheet/sheet.go	/^		TimeSum     float32$/;"	m	struct:timesheet.Record	typeref:typename:float32
Times	pkg/timesheet/sheet.go	/^		Times       BulletList `json:"times"`$/;"	m	struct:timesheet.Record	typeref:typename:BulletList
Timplate	README.md	/^## Timplate$/;"	s
TotalHours	pkg/timesheet/sheet.go	/^func (s Sheet) TotalHours() float64 {$/;"	f	struct:timesheet.Sheet	typeref:typename:float64
TotalPay	pkg/timesheet/sheet.go	/^func (s Sheet) TotalPay() float64 {$/;"	f	struct:timesheet.Sheet	typeref:typename:float64
arglist	flag_handler.go	/^	arglist []string$/;"	t	package:main	typeref:typename:[]string
build	Makefile	/^build:$/;"	t
cleanUpIntermediateFiles	pkg/converter/converter.go	/^func (c *Converter) cleanUpIntermediateFiles() error {$/;"	f	struct:converter.Converter	typeref:typename:error
compile	flag_handler.go	/^	compile = flag.Bool("c", false, "compile using pdflatex (use only if installed)")$/;"	v	package:main
compileFlagIsOn	flag_handler.go	/^func compileFlagIsOn() bool {$/;"	f	package:main	typeref:typename:bool
contains	flag_handler.go	/^func (al arglist) contains(s string) bool {$/;"	f	type:main.arglist	typeref:typename:bool
converter	pkg/converter/converter.go	/^package converter$/;"	p
converter	pkg/converter/template.go	/^package converter$/;"	p
enumitem	pkg/converter/template.go	/^	enumitem = `$/;"	c	package:converter
escapeRegex	pkg/converter/converter.go	/^var escapeRegex = regexp.MustCompile("([&%$#_{}~\\\\^])")$/;"	v	package:converter
executeTemplate	pkg/converter/converter.go	/^func (c *Converter) executeTemplate() {$/;"	f	struct:converter.Converter
handleFlags	flag_handler.go	/^func handleFlags() {$/;"	f	package:main
help	flag_handler.go	/^	help    = flag.Bool("h", false, "show a help message, without running the program")$/;"	v	package:main
helpMessage	flag_handler.go	/^	helpMessage = `Usage: timplate [OPTIONS] <infile.yaml>$/;"	c	package:main
infile	flag_handler.go	/^func infile() string {$/;"	f	package:main	typeref:typename:string
install	Makefile	/^install:$/;"	t
loadInfileText	pkg/converter/converter.go	/^func (c *Converter) loadInfileText() error {$/;"	f	struct:converter.Converter	typeref:typename:error
main	flag_handler.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f	package:main
main	main.go	/^package main$/;"	p
outfile	flag_handler.go	/^func outfile() string {$/;"	f	package:main	typeref:typename:string
output	flag_handler.go	/^	output  = flag.String("o", "timesheet.tex", "the resulting .tex file")$/;"	v	package:main
parseTemplate	pkg/converter/converter.go	/^func (c *Converter) parseTemplate() {$/;"	f	struct:converter.Converter
parseYaml	pkg/converter/converter.go	/^func (c *Converter) parseYaml() error {$/;"	f	struct:converter.Converter	typeref:typename:error
timesheet	pkg/timesheet/sheet.go	/^package timesheet$/;"	p
timesheetTemplate	pkg/converter/template.go	/^	timesheetTemplate = `$/;"	c	package:converter
